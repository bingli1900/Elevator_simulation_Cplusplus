========================================================================
    CONSOLE APPLICATION : elevator_test Project Overview
========================================================================

//---------------------------ELEVATOR TEST LIBRARY------------------------------------------------
//
//Final project for mpcs51044 "C++ for advanced programmer"
//
//by Bing Li
//
//simulating the operation of elevators algorithms
// 1) assumptions:
//    (1) people will wait until the elevator comes once they enter the queue 
//
//    (2) time is quantum, elevator will move by one floor up or down in each 
//        time quantum; and if the elevator is static, then it'll take one quantum
//        of time for each person to get on or off;  
//
//    (3) the building has 20 floors (0,1,2,3,4,...19) and n elevators (n can be 1,2,3...)
//        so in this setting, we would have 18*2+1+1 = 38 buttons on floors and 20 in each elevator.
//
// 2) Additional assumptions, like:
//	  if elevators are independent or not:
//	     the strategy of each elevator can be independent from each other;
//       the people waiting for one elevator won't take another elevator
//    should say that a good algorithm should consider the cooperation between elevators.
//
// 3) independent elevators are candidates to apply multi-threads;
//    we can also apply multi-threads with the statistics class, different threads deal with
//    different input event flows(generated by Monte Carlo). 
//    Use a bunch of event flows, we can solve problems like "How
//    long on average do I have to wait, if I want to take the elevator from floor i
//    to floor j in a rush period?"
//
// 4) another possibility to solve this problem is to compute analytically;
//    don't instantiate individual human being and floor as an object in the solution, 
//    but rather use matrix element Mij to stand for if there is any person in a queue. 
//    Mij is the num of people who wants
//    to move from level i to level j.
//
//-----------------------------------------------------------------------------------------------
//
//	The basic logic or hierarchy structure of this project is as follows:
//
//  All classes: QuanTimer, Elevator, Floor, Algorithm, Statistics, Person 
//
//
//       Alg and Stat are members of            (time_step function)
//          ---------------------------------->     QuanTimer  (control time flow/coordinate all classes)                   
//          |           |                           | ^                     ^
//          |           |     determines            | | (button pressed)     \ update "button pressed" information
//          |           | Elevator's next state     V |                       \
//          |       Algorithm--------------->   Elevator  <====================> Floor (20 floors, each has two queues,
//          |  (can derive diff algs)     (moving and talking to current floor) /  ^               up and down)
//          |                                            \                     /   |
//          |                                             \                   /    |
//      Statistics ---------------------------------------> --> Person   <----     |
//          |     record each person's getting on and off                          |
//          |                                                                      |
//          |-----------------------------------------------------------------------
//             (generate "task queues" at each floor, like "who comes at which
//                 floor at what time and going towards which floor)
//
//-----------------------------------------------------------------------------------------------
//
//	The most important member functions are:
//         1. QuanTimer::time_step()
//         2. Elevator::update()
//         3. Algorithm::processing()
// 
//-----------------------------------------------------------------------------------------------


/////////////////////////////////////////////////////////////////////////////
